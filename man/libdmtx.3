.\" $Id$
.\"
.\" Man page for the libdmtx project.
.\"
.\" To view: $ groff -man -T ascii libdmtx.3 | less
.\" To text: $ groff -man -T ascii libdmtx.3 | col -b | expand
.\"
.TH LIBDMTX 3 "April 13, 2008"
.SH NAME
libdmtx \- Data Matrix Encoder/Decoder Library 0.5.0
.SH SYNOPSIS
\fB#include <dmtx.h>\fP

\fIENCODING FUNCTIONS\fP

\fBDmtxEncode dmtxEncodeStructInit(\fIvoid\fP);\fP

\fBint dmtxEncodeDataMatrix(DmtxEncode *\fIenc\fP, int \fIn\fP, unsigned char *\fIs\fP, int \fIsizeIdxRequest\fP);\fP

\fBint dmtxEncodeDataMosaic(DmtxEncode *\fIenc\fP, int \fIn\fP, unsigned char *\fIs\fP, int \fIsizeIdxRequest\fP);\fP

\fBvoid dmtxEncodeStructDeInit(DmtxEncode *\fIenc\fP);\fP

\fIDECODING FUNCTIONS\fP

\fBDmtxDecode dmtxDecodeStructInit(DmtxImage *\fIimg\fP, DmtxPixelLoc \fIp0\fP, DmtxPixelLoc \fIp1\fP, int \fIgap\fP);\fP

\fBDmtxRegion dmtxDecodeFindNextRegion(DmtxDecode *\fIdec\fP);\fP

\fBDmtxMessage *dmtxDecodeMatrixRegion(DmtxDecode *\fIdec\fP, DmtxRegion *\fIreg\fP, int \fIfix\fP);\fP

\fBDmtxMessage *dmtxDecodeMosaicRegion(DmtxDecode *\fIdec\fP, DmtxRegion *\fIreg\fP, int \fIfix\fP);\fP

\fBvoid dmtxDecodeStructDeInit(DmtxDecode *\fIdec\fP);\fP

\fICOMMON FUNCTIONS\fP

\fBDmtxMessage *dmtxMessageMalloc(int \fIsizeIdx\fP);\fP

\fBvoid dmtxMessageFree(DmtxMessage **\fImesg\fP);\fP

\fBDmtxImage *dmtxImageMalloc(int \fIwidth\fP, int \fIheight\fP);\fP

\fBint dmtxImageFree(DmtxImage **\fIimg\fP);\fP

.SH DESCRIPTION
\fIlibdmtx\fP is a shared library that provides the ability to read and write Data Matrix barcodes of the modern ECC200 variety.  The utility programs \fIdmtxread\fP and \fIdmtxwrite\fP serve as the official command line interface for libdmtx, and also provide a good reference for programmers who wish to write their own programs that interact with libdmtx.

Data Matrix barcodes are two dimensional patterns that resemble a checkerboard in appearance, and hold a high density of data with built-in error correction.  They can exist in either square or rectangular configurations, and support several different encodation schemes for optimized storage of binary and text data.  The Data Matrix symbology was invented and released into the public domain by RVSI Acuity CiMatrix.

.SH ENCODING - Generating Data Matrix Barcodes
libdmtx provides a simple set of functions for encoding.  The following steps will produce an image that holds a Data Matrix barcode with the specified message.

1. Call \fBdmtxEncodeStructInit()\fP

Initializes the internal values of the encoding process.  Must be called before any other encoding functions.

2. Call either \fBdmtxEncodeDataMatrix()\fP or \fBdmtxEncodeDataMosaic()\fP

Depending on the desired barcode format, the calling program will use one of these functions to generate a barcode image within the \fBDmtxEncode\fP struct.  The calling program is responsible for using this information to create a permanent image file.

3. Call \fBdmtxEncodeStructDeInit()\fP

Resets the internal encoding values and frees memory allocated during the encoding process.

.SH DECODING - Reading Data Matrix Barcodes
libdmtx provides a number of functions designed to provide maximum control and flexibility in the decoding process.  The following steps first allocate memory for the image data held by the calling application.  After the image data is captured, the remaining steps will find and decode the barcodes present in the image.

1. Call \fBdmtxImageMalloc()\fP

Allocates memory for received image data.  libdmtx provides its own image structure that the calling program must populate before starting a scan.

2. Call \fBdmtxDecodeStructInit()\fP

Initializes the \fBDmtxDecode\fP struct, which designates the image to be scanned and resets the grid pattern for a new scan.  This function must be called before any other scanning functions.

3. Call \fBdmtxDecodeFindNextRegion()\fP

Searches every pixel location in a recursive grid pattern looking for potential barcode edges.  A \fBDmtxRegion\fP is returned whenever A) a potential barcode region is found, or B) the final pixel has been scanned.  Subsequent calls to this function will resume the search where the previous call left off.

\fIImportant\fP: This function does not dynamically allocate memory and does not decode the barcode contents.  If the calling program receives a region that it wishes to discard, it can simply continue without freeing or cleaning up the previous \fBDmtxRegion\fP struct.  This can be useful for programs that are selective in choosing which regions should be decoded.

4. Call either \fBdmtxDecodeMatrixRegion()\fP or \fBdmtxDecodeMosaicRegion()\fP

Extract bit values from the barcode region and decode the underlying message.  \fBDmtxMessage\fP values returned from this function must be freed after use.

5. Call \fBdmtxMessageFree()\fP

Free the memory held by a \fBDmtxMessage\fP struct.  The complementary function, \fBdmtxMessageMalloc()\fP, is automatically called by \fBdmtxDecodeMatrixRegion()\fP and therefore is not normally used by the calling program.

6. Call \fBdmtxDecodeStructDeInit()\fP

Resets the internal decoding values used during the decoding process.

7. Call \fBdmtxImageFree()\fP

Resets and frees memory held by \fBDmtxImage\fP struct.  This is the complement to \fBdmtxImageMalloc()\fP.

.SH EXAMPLE PROGRAM

This example program (available as simpletest.c in the source package) demonstrates both directions of \fIlibdmtx\fP functionality, encoding and decoding.  It first creates a Data Matrix barcode and then reads it back and prints the decoded message.  If everything works correctly then the final output message should match the original input string.

  #include <stdlib.h>
  #include <stdio.h>
  #include <string.h>
  #include <unistd.h>
  #include <dmtx.h>

  int
  main(int argc, char **argv)
  {
     unsigned char testString[] = "30Q324343430794<OQQ";
     DmtxEncode encode;
     DmtxImage *image;
     DmtxDecode decode;
     DmtxRegion region;
     DmtxMessage *message;
     DmtxPixelLoc p0, p1;

     fprintf(stdout, "input:  \\"%s\\"\\n", testString);

     /* 1) Encode a new Data Matrix barcode image and keep in memory */

     encode = dmtxEncodeStructInit();
     dmtxEncodeDataMatrix(&encode, strlen((char *)testString), testString,
           DMTX_SYMBOL_SQUARE_AUTO);

     /* 2) Take a copy of the new image before freeing DmtxEncode struct */

     image = dmtxImageMalloc(encode.image->width, encode.image->height);
     memcpy(image->pxl, encode.image->pxl, image->width * image->height *
           sizeof(DmtxPixel));

     dmtxEncodeStructDeInit(&encode);

     /* 3) Read back the Data Matrix barcode that was created above */

     p0.X = p0.Y = 0;
     p1.X = image->width - 1;
     p1.Y = image->height - 1;

     decode = dmtxDecodeStructInit(image, p0, p1, 5);

     region = dmtxDecodeFindNextRegion(&decode);
     if(region.found == DMTX_REGION_EOF)
        exit(0);

     message = dmtxDecodeMatrixRegion(&decode, &region, 1);
     if(message != NULL) {
        fputs("output: \\"", stdout);
        fwrite(message->output, sizeof(unsigned char), message->outputIdx, stdout);
        fputs("\\"\\n\\n", stdout);
        dmtxMessageFree(&message);
     }

     dmtxDecodeStructDeInit(&decode);
     dmtxImageFree(&image);

     exit(0);
  }

.SH "SEE ALSO"
\fIdmtxread\fP(1), \fIdmtxwrite\fP(1)
.SH STANDARDS
ISO/IEC 16022:2000
.PP
ANSI/AIM BC11 ISS
.SH BUGS
Email bug reports to mike@dragonflylogic.com
.SH AUTHOR
Copyright (c) 2008 Mike Laughton
.\" end of man page
