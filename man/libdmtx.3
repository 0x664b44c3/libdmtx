.\" $Id$
.\"
.\" Man page for the libdmtx project.
.\"
.\" To view: $ groff -man -T ascii libdmtx.3 | less
.\" To text: $ groff -man -T ascii libdmtx.3 | col -b | expand
.\"
.TH LIBDMTX 3 "November 23, 2008"
.SH NAME
libdmtx \- Data Matrix Encoding & Decoding Library 0.6.1
.SH SYNOPSIS
\fB#include <dmtx.h>\fP

cc file.c -ldmtx

.SH DESCRIPTION
\fIlibdmtx\fP is a software library that enables programs to read and write Data Matrix barcodes of the modern ECC200 variety. The library runs natively on several platforms, and can be accessed by multiple languages using the provided language wrappers. The utility programs \fIdmtxread\fP and \fIdmtxwrite\fP also provide a command line interface for libdmtx, and serve as a good reference for developers who are writing their own programs with libdmtx.

Data Matrix barcodes are two dimensional patterns that resemble a checkerboard in appearance, and hold a high density of data with built-in error correction. They can exist in either square or rectangle configurations, and support several different encodation schemes for optimized storage of text and binary data. The Data Matrix symbology was invented and released into the public domain by RVSI Acuity CiMatrix.

.SH ENCODING - Generating Data Matrix Barcodes
Programs can generate a barcode with just a few basic calls to libdmtx:

1. Call \fBdmtxEncodeCreate()\fP

Creates a new DmtxEncode structure and initializes the encoding process. This function must be called before the other encoding functions, as the returned DmtxEncode structure is a required parameter for the remaining encoding functions.

2. Call \fBdmtxEncodeSetProp()\fP [optional]

Allows you to control the encoding behavior. If this function is not called, libdmtx will use the default values set by dmtxEncodeCreate() above. There is also a dmtxEncodeGetProp() function that returns the current settings.

3. Call either \fBdmtxEncodeDataMatrix()\fP or \fBdmtxEncodeDataMosaic()\fP

Call one of these two functions to generate an image of the desired barcode type. Your program is responsible for dispatching the resulting image data to its destination, whether that means displaying it on a screen, writing an image file, copying it elsewhere, etc...

4. Call \fBdmtxEncodeDestroy()\fP

Releases the memory allocated during the encoding process.

.SH DECODING - Reading Data Matrix Barcodes

Barcode reading requires more steps than barcode generation, mostly from the additional complexity of not knowing where the barcodes located when starting a new scan. Even so, it's a straightforward process that uses 4 main structures:

\fBDmtxImage\fP holds image properties and a pointer to the pixel data. The calling program uses this structure to communicate image data with libdmtx.

\fBDmtxDecode\fP holds values for controlling decode behavior and tracking scan progress.

\fBDmtxRegion\fP defines a 4-sided region in pixel coordinates. The region corners are not necessarily right angles, and any orientation is possible. When libdmtx finds a region it believes to be a Data Matrix, it uses this entity to communicate the exact location. Multiple regions may be found within an image, one at a time.

\fBDmtxMessage\fP holds the decoded message after being extracted from the barcode region. A successfully decoded region will produce exactly one message.

Use the following functions to detect and decode Data Matrix barcodes:

1. Call \fBdmtxImageCreate()\fP

Creates and initializes a new DmtxImage structure. If the first parameter is passed as NULL, libdmtx allocates its own memory to store the pixel data. Otherwise it uses the pixel memory at the provided address in a "read only" manner. Other parameters include image width, height, bits per pixel, and packing order.

2. Call \fBdmtxDecodeCreate()\fP

Creates and initializes a new \fBDmtxDecode\fP struct, which designates the image to be scanned and sets the grid pattern for a new scan. This function must be called before any other scanning functions.

3. Call \fBdmtxDecodeSetProp()\fP [optional]

Sets internal properties to control decoding behavior. This feature allows applications to tune performance and accuracy for specific image conditions. A dmtxDecodeGetProp() function is also available.

4. Call \fBdmtxRegionFindNext()\fP

Searches every pixel location in a grid pattern looking for potential barcode edges. A \fBDmtxRegion\fP is returned whenever A) a potential barcode region is found, or B) the final pixel has been scanned. Subsequent calls to this function will resume the search where the previous call left off.

5. Call either \fBdmtxDecodeMatrixRegion()\fP or \fBdmtxDecodeMosaicRegion()\fP

Extract bit values from the barcode region and decode the underlying message. \fBDmtxMessage\fP values returned from this function must be freed after use.

6. Call \fBdmtxMessageDestroy()\fP

Releases the memory held by a \fBDmtxMessage\fP struct. The complementary function, \fBdmtxMessageCreate()\fP, is automatically called by \fBdmtxDecodeMatrixRegion()\fP and therefore is not normally used by the calling program.

7. Call \fBdmtxRegionDestroy()\fP

Releases the memory held by a \fBDmtxRegion\fP struct. The complementary function, \fBdmtxRegionCreate()\fP, is automatically called by \fBdmtxRegionFindNext()\fP (actually \fBdmtxRegionScanPixel()\fP) and therefore is not normally used by the calling program.

8. Call \fBdmtxDecodeDestroy()\fP

Releases the memory held by a \fBDmtxDecode\fP struct. This is the complementary function to \fBdmtxDecodeCreate()\fP.

9. Call \fBdmtxImageDestroy()\fP

Releases the memory held by a \fBDmtxImage\fP struct. If \fBdmtxImageCreate()\fP was called with NULL as the first parameter, \fBdmtxImageDestroy()\fP will free the pixel memory. Otherwise it will leave the memory intact.

.SH EXAMPLE PROGRAM

This example program (available as simple_test.c in the source package) demonstrates \fIlibdmtx\fP functionality in both directions: encoding and decoding. It creates a Data Matrix barcode in memory, reads it back, and prints the decoded message. The final output message should match the original input string.

  #include <stdlib.h>
  #include <stdio.h>
  #include <string.h>
  #include <assert.h>
  #include <dmtx.h>

  int
  main(int argc, char *argv[])
  {
     size_t          width, height, bytesPerPixel;
     unsigned char   str[] = "30Q324343430794<OQQ";
     unsigned char  *pxl;
     DmtxEncode     *enc;
     DmtxImage      *img;
     DmtxDecode     *dec;
     DmtxRegion     *reg;
     DmtxMessage    *msg;

     fprintf(stdout, "input:  \\"%s\\"\\n", str);

     /* 1) ENCODE a new Data Matrix barcode image (in memory only) */

     enc = dmtxEncodeCreate();
     assert(enc != NULL);
     dmtxEncodeDataMatrix(enc, strlen(str), str);

     /* 2) COPY the new image data before releasing encoding memory */

     width = dmtxImageGetProp(enc->image, DmtxPropWidth);
     height = dmtxImageGetProp(enc->image, DmtxPropHeight);
     bytesPerPixel = dmtxImageGetProp(enc->image, DmtxPropBytesPerPixel);

     pxl = (unsigned char *)malloc(width * height * bytesPerPixel);
     assert(pxl != NULL);
     memcpy(pxl, enc->image->pxl, width * height * bytesPerPixel);

     dmtxEncodeDestroy(&enc);

     /* 3) DECODE the Data Matrix barcode from the copied image */

     img = dmtxImageCreate(pxl, width, height, 24, DmtxPackRGB);
     assert(img != NULL);

     dec = dmtxDecodeCreate(img);
     assert(dec != NULL);

     reg = dmtxRegionFindNext(dec, NULL);
     if(reg != NULL) {
        msg = dmtxDecodeMatrixRegion(dec, reg, DmtxUndefined);
        if(msg != NULL) {
           fputs("output: \\"", stdout);
           fwrite(msg->output, sizeof(unsigned char), msg->outputIdx, stdout);
           fputs("\\"\\n", stdout);
           dmtxMessageDestroy(&msg);
        }
        dmtxRegionDestroy(&reg);
     }

     dmtxDecodeDestroy(&dec);
     dmtxImageDestroy(&img);
     free(pxl);

     exit(0);
  }

.SH "SEE ALSO"
\fIdmtxread\fP(1), \fIdmtxwrite\fP(1), \fIdmtxquery\fP(1)
.SH STANDARDS
ISO/IEC 16022:2000
.PP
ANSI/AIM BC11 ISS
.SH BUGS
Email bug reports to mike@dragonflylogic.com
.SH AUTHOR
Copyright (C) 2008, 2009 Mike Laughton
.\" end of man page
