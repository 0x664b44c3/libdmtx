.\" $Id$
.\"
.\" Man page for the libdmtx project.
.\"
.\" To view: $ groff -man -T ascii libdmtx.3 | less
.\" To text: $ groff -man -T ascii libdmtx.3 | col -b | expand
.\"
.TH LIBDMTX 3 "November 23, 2008"
.SH NAME
libdmtx \- Data Matrix Encoding & Decoding Library 0.6.1
.SH SYNOPSIS
\fB#include <dmtx.h>\fP

cc file.c -ldmtx

.SH DESCRIPTION
\fIlibdmtx\fP is a software library that enables programs to read and write ECC200 Data Matrix barcodes. The library runs natively on a number of computer platforms, and can be accessed by multiple languages through the use of provided language wrappers. The utility programs \fIdmtxread\fP and \fIdmtxwrite\fP provide a command line interface for libdmtx, and serve as a good reference for programmers writing their own programs that use libdmtx.

Data Matrix barcodes are two dimensional patterns that resemble a checkerboard in appearance, and hold a high density of data with built-in error correction. They can exist in either square or rectangle configurations, and support several different encodation schemes for optimized storage of text and binary data. The Data Matrix symbology was invented and released into the public domain by RVSI Acuity CiMatrix.

.SH ENCODING - Generating Data Matrix Barcodes
A program can generate barcodes with just a few basic calls to libdmtx. The following steps will produce a barcode image stored in memory:

1. Call \fBdmtxEncodeCreate()\fP

This function creates a new DmtxEncode structure and initializes the encoding process. This function must be called before any other encoding functions, as the returned DmtxEncode structure will be used throughout.

2. Call \fBdmtxEncodeSetProp()\fP [optional]

The dmtxEncodeSetProp() function allows you to control several aspects of the encoding behavior. If this function is not called, libdmtx will use the default values set by dmtxEncodeCreate() above.

3. Call either \fBdmtxEncodeDataMatrix()\fP or \fBdmtxEncodeDataMosaic()\fP

Call one of these two functions to generate an image of the desired barcode type. The calling program is responsible for using this output to dispatch the information downstream, whether that means displaying it, writing a file, copying it elsewhere, etc...

4. Call \fBdmtxEncodeDestroy()\fP

Releases the memory allocated during the encoding process.

.SH DECODING - Reading Data Matrix Barcodes
libdmtx provides a number of functions designed to provide maximum control and flexibility in the decoding process. The following steps first allocate memory for the image data held by the calling application. After the image data is captured, the remaining steps will find and decode the barcodes present in the image.

1. Call \fBdmtxImageCreate()\fP

Allocates memory for received image data. libdmtx provides its own image structure that the calling program must populate before starting a scan.

2. Call \fBdmtxDecodeCreate()\fP

Initializes the \fBDmtxDecode\fP struct, which designates the image to be scanned and resets the grid pattern for a new scan. This function must be called before any other scanning functions.

3. Call \fBdmtxDecodeSetProp()\fP

Set internal properties to control decoding behavior. This feature allows applications to tune performance and accuracy for specific image conditions.

4. Call \fBdmtxRegionFindNext()\fP

Searches every pixel location in a recursive grid pattern looking for potential barcode edges. A \fBDmtxRegion\fP is returned whenever A) a potential barcode region is found, or B) the final pixel has been scanned. Subsequent calls to this function will resume the search where the previous call left off.

5. Call either \fBdmtxDecodeMatrixRegion()\fP or \fBdmtxDecodeMosaicRegion()\fP

Extract bit values from the barcode region and decode the underlying message. \fBDmtxMessage\fP values returned from this function must be freed after use.

6. Call \fBdmtxMessageDestroy()\fP

Free the memory held by a \fBDmtxMessage\fP struct. The complementary function, \fBdmtxMessageMalloc()\fP, is automatically called by \fBdmtxDecodeMatrixRegion()\fP and therefore is not normally used by the calling program.

7. Call \fBdmtxRegionDestroy()\fP

xxx

8. Call \fBdmtxDecodeDestroy()\fP

Resets the internal decoding values used during the decoding process.

9. Call \fBdmtxImageDestroy()\fP

Resets and frees memory held by \fBDmtxImage\fP struct. This is the complement to \fBdmtxImageMalloc()\fP.

.SH EXAMPLE PROGRAM

This example program (available as simple_test.c in the source package) demonstrates both directions of \fIlibdmtx\fP functionality, encoding and decoding. It creates a Data Matrix barcode in memory and then reads it back and prints the decoded message. If everything works correctly then the final output message will match the original input string.

  #include <stdlib.h>
  #include <stdio.h>
  #include <string.h>
  #include <assert.h>
  #include <dmtx.h>

  int
  main(int argc, char *argv[])
  {
     size_t          width, height, bytesPerPixel;
     unsigned char   str[] = "30Q324343430794<OQQ";
     unsigned char  *pxl;
     DmtxEncode     *enc;
     DmtxImage      *img;
     DmtxDecode     *dec;
     DmtxRegion     *reg;
     DmtxMessage    *msg;

     fprintf(stdout, "input:  \\"%s\\"\\n", str);

     /* 1) ENCODE a new Data Matrix barcode image (in memory only) */

     enc = dmtxEncodeCreate();
     assert(enc != NULL);
     dmtxEncodeDataMatrix(enc, strlen(str), str);

     /* 2) COPY the new image data before releasing encoding memory */

     width = dmtxImageGetProp(enc->image, DmtxPropWidth);
     height = dmtxImageGetProp(enc->image, DmtxPropHeight);
     bytesPerPixel = dmtxImageGetProp(enc->image, DmtxPropBytesPerPixel);

     pxl = (unsigned char *)malloc(width * height * bytesPerPixel);
     assert(pxl != NULL);
     memcpy(pxl, enc->image->pxl, width * height * bytesPerPixel);

     dmtxEncodeDestroy(&enc);

     /* 3) DECODE the Data Matrix barcode from the copied image */

     img = dmtxImageCreate(pxl, width, height, 24, DmtxPackRGB);
     assert(img != NULL);

     dec = dmtxDecodeCreate(img);
     assert(dec != NULL);

     reg = dmtxRegionFindNext(dec, NULL);
     if(reg != NULL) {
        msg = dmtxDecodeMatrixRegion(dec, reg, DmtxUndefined);
        if(msg != NULL) {
           fputs("output: \\"", stdout);
           fwrite(msg->output, sizeof(unsigned char), msg->outputIdx, stdout);
           fputs("\\"\\n", stdout);
           dmtxMessageDestroy(&msg);
        }
        dmtxRegionDestroy(&reg);
     }

     dmtxDecodeDestroy(&dec);
     dmtxImageDestroy(&img);
     free(pxl);

     exit(0);
  }

.SH "SEE ALSO"
\fIdmtxread\fP(1), \fIdmtxwrite\fP(1), \fIdmtxquery\fP(1)
.SH STANDARDS
ISO/IEC 16022:2000
.PP
ANSI/AIM BC11 ISS
.SH BUGS
Email bug reports to mike@dragonflylogic.com
.SH AUTHOR
Copyright (C) 2008, 2009 Mike Laughton
.\" end of man page
